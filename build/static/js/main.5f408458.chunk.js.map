{"version":3,"sources":["types.js","lib/getLine.js","lib/writeFile.js","ExcelReader.js","index.js"],"names":["SheetJSFT","map","x","join","KEYS","_trim","v","trim","getLine","line","res","_","each","key","elem","includes","split","slice","l","arr","word","comment","getElem","writeFile","name","value","val","undefined","download","document","createElement","href","style","display","id","body","appendChild","getElementById","click","removeChild","ExcelReader","props","handleChange","e","files","target","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","type","bookVBA","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","JSON","stringify","readAsArrayBuffer","state","cols","htmlFor","className","accept","onChange","this","Component","App","render"],"mappings":"gWAAaA,EAAY,CACxB,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAC1IC,KAAI,SAAUC,GAAK,MAAO,IAAMA,KAAMC,KAAK,K,gBCAvCC,EAAO,CAAC,OAAQ,UAAW,cAAe,OAAQ,YAElDC,EAAQ,SAACC,GAAD,OAAOA,EAAIA,EAAEC,OAASD,GA2BrBE,EANC,SAACC,GACb,IAAMC,EAAM,GAGZ,OAFAC,IAAEC,KAAKR,GAAM,SAAAS,GAAG,OACZH,EAAIG,GAtBI,SAACJ,EAAMI,GACnB,IAAMC,EAAOT,EAAMI,EAAKI,IACxB,MAAY,SAARA,EACOC,EAEFH,IAAEI,SAAS,CAAC,WAAY,WAAYF,IACjCC,GAAQ,IAAIE,MAAM,QAAQC,MAAM,GAE3B,gBAARJ,EACEF,IAAEV,KAAKa,GAAQ,IAAIE,MAAM,OAAOC,MAAM,IAAI,SAAAC,GAC7C,IAAMC,GAAOD,GAAK,IAAIF,MAAM,UAC5B,MAAO,CAAEI,KAAMD,EAAI,GAAIE,QAASF,EAAI,OAG3B,SAARN,EACER,EAAMI,EAAI,MAAY,YAD5B,EAQUa,CAAQb,EAAMI,MACtBH,GChBIa,EAbG,SAACC,EAAMC,GACrB,IAAIC,EAAMD,OACIE,IAAVF,IACAC,EAAM,IAEV,IAAIE,EAAWC,SAASC,cAAc,KACtCF,EAASG,KAAO,gEAAkEL,EAClFE,EAASA,SAAWJ,EACpBI,EAASI,MAAMC,QAAU,OACzBL,EAASM,GAAK,WAAYL,SAASM,KAAKC,YAAYR,GACpDC,SAASQ,eAAe,YAAYC,QACpCT,SAASM,KAAKI,YAAYX,ICkDfY,E,YArDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,aAAe,SAACC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,GAAIA,GAASA,EAAM,GAAI,CACrB,IAAME,EAAOF,EAAM,GAEbG,EAAS,IAAIC,WACbC,IAASF,EAAOG,mBAEtBH,EAAOI,OAAS,SAACR,GAEf,IAAMS,EAAOT,EAAEE,OAAOQ,OAChBC,EAAKC,IAAKC,KAAKJ,EAAM,CAAEK,KAAMR,EAAO,SAAW,QAASS,SAAS,IAEjEC,EAASL,EAAGM,WAAW,GACvBC,EAAKP,EAAGQ,OAAOH,GAEfI,EAAOpD,IAAEV,IAAIsD,IAAKS,MAAMC,cAAcJ,IAAK,SAAA3C,GAAC,OAAIV,EAAQU,MAE9DK,EAAU,aAAc2C,KAAKC,UAAU,CAAEJ,WAEvCd,EACFF,EAAOG,mBAAmBJ,GAE1BC,EAAOqB,kBAAkBtB,KA7B7B,EAAKuB,MAAQ,CACXN,KAAM,GACNO,KAAM,IAJS,E,sEAqCjB,OACE,6BACE,2BAAOC,QAAQ,QAAf,kCACA,6BACA,2BACEd,KAAK,OACLe,UAAU,eACVtC,GAAG,OACHuC,OAAQzE,EACR0E,SAAUC,KAAKjC,oB,GA/CCkC,aCFpBC,E,YACJ,aAAe,IAAD,8BACZ,+CACKR,MAAQ,CACX7C,KAAM,SAHI,E,sEAQZ,OACE,6BACE,kBAAC,EAAD,W,GAXUoD,aAiBlBE,iBAAO,kBAAC,EAAD,MAASjD,SAASQ,eAAe,W","file":"static/js/main.5f408458.chunk.js","sourcesContent":["export const SheetJSFT = [\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\n].map(function (x) { return \".\" + x; }).join(\",\");","import _ from 'lodash';\r\n\r\nconst KEYS = ['word', 'similar', 'translation', 'link', 'examples']\r\n\r\nconst _trim = (v) => v ? v.trim() : v;\r\n\r\nconst getElem = (line, key) => {\r\n    const elem = _trim(line[key]);\r\n    if (key === 'word') {\r\n        return elem;\r\n    }\r\n    else if (_.includes(['examples', 'similar'], key)) {\r\n        return (elem || '').split('<br>').slice(1);\r\n    }\r\n    else if (key === 'translation') {\r\n        return _.map((elem || '').split('<p>').slice(1), l => {\r\n            const arr = (l || '').split('<span>')\r\n            return { word: arr[0], comment: arr[1] };\r\n        })\r\n    }\r\n    else if (key === 'link') {\r\n        return _trim(line['word']) + '.png';\r\n    }\r\n}\r\n\r\nconst getLine = (line) => {\r\n    const res = {};\r\n    _.each(KEYS, key =>\r\n        res[key] = getElem(line, key));\r\n    return res;\r\n}\r\nexport default getLine;","const writeFile = (name, value) => {\r\n    var val = value;\r\n    if (value === undefined) {\r\n        val = \"\";\r\n    }\r\n    var download = document.createElement(\"a\");\r\n    download.href = \"data:text/plain;content-disposition=attachment;filename=file,\" + val;\r\n    download.download = name;\r\n    download.style.display = \"none\";\r\n    download.id = \"download\"; document.body.appendChild(download);\r\n    document.getElementById(\"download\").click();\r\n    document.body.removeChild(download);\r\n}\r\nexport default writeFile","import React, { Component } from 'react';\nimport XLSX from 'xlsx';\nimport { SheetJSFT } from './types';\nimport getLine from './lib/getLine';\nimport _ from 'lodash';\nimport writeFile from './lib/writeFile';\n\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      cols: []\n    }\n  }\n\n  handleChange = (e) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      const file = files[0];\n\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = (e) => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const data = _.map(XLSX.utils.sheet_to_json(ws), l => getLine(l));\n\n        writeFile('words.json', JSON.stringify({ data }));\n      }\n      if (rABS) {\n        reader.readAsBinaryString(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      };\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"file\">Грузи</label>\n        <br />\n        <input\n          type=\"file\"\n          className=\"form-control\"\n          id=\"file\"\n          accept={SheetJSFT}\n          onChange={this.handleChange} />\n      </div>\n\n    )\n  }\n}\n\nexport default ExcelReader;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nimport ExcelReader from './ExcelReader';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: 'React'\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <ExcelReader/>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}